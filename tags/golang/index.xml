<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on Benjamin Boudreau</title><link>https://seriousben.com/tags/golang/</link><description>Recent content in golang on Benjamin Boudreau</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright Â© Benjamin Boudreau 2017-2020</copyright><lastBuildDate>Sat, 12 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://seriousben.com/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Patch Coverage</title><link>https://seriousben.com/posts/2022-02-patch-coverage/</link><pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate><guid>https://seriousben.com/posts/2022-02-patch-coverage/</guid><description>Code Coverage as a way to track code quality has existed for as long as code exists. For that same amount of time, different schools of thought have debated on how best to leverage coverage to help drive quality. For example, the concept of Modified condition/decision coverage which defines a criterion used in avionics, in automotive, and in lots of safety-critical systems has been referred to in standards created in 1992.</description></item></channel></rss>